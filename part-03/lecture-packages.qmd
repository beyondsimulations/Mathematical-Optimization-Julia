---
title: "Lecture III - Packages and Data Management"
subtitle: "Applied Optimization with Julia"
author: "Dr. Tobias Vlćek"
institute: "University of Hamburg - Fall 2024"
title-slide-attributes:
    data-background-color: "#025259"
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"

format:
    html:
        theme: [litera, ../styles.scss]
    revealjs:
        theme: [default, ../styles.scss]
        transition: slide
        transition-speed: fast
        highlight-style: arrow
        slide-number: true
        code-copy: true
        code-link: true
        preview-links: auto
        footer: " {{< meta title >}} | {{< meta author >}} | [Home](lecture-packages.qmd)"
        output-file: lecture-presentation.html


execute:
    echo: true
---

# [Quick Recap from last Week]{.flow} {.title}

## Variables and Data Types

- Variables are used to store values
- Assign a value to a variable using the `=` operator
- You can use [different data types]{.highlight} for variables
- You can change the value of a variable

. . .

::: {.callout-tip}
You can use the `typeof` function to check the type of a variable.
:::

## Vectors and Matrices

- Vectors and matrices are used to store multiple values
- You can create a them using the `[` and `]` operators
- Access their elements using square brackets

. . .

::: {.callout-tip}
You can use the `push!` function to add elements to a vector or the `pop!` function to remove elements from a vector.
:::

## Comparisons and Logic

- Comparisons are [used to compare values]{.highlight}
- `==` checks if two values are equal
- `!=` checks if two values are not equal
- `<` checks if one value is smaller than the other
- `>=` checks if one value is greater than or equal to the other
- `&&` checks if two values are true
- `||` checks if at least one of two values is true

## Loops

- Loops are used to repeat code
- `for` loop repeats code for a fixed number of times
- `while` loop repeats code until a condition is met
- `if` statement checks if a condition is true
- `else` executes code if a condition is false
- `elseif` checks if a condition is true and executes if it is

## Scope

- Scope determines where a variable is defined and lives
- `global` keyword defines a global variable
- `local` keyword defines a local variable
- `let` keyword defines a local variable

. . .

::: {.callout-tip}
Global variables usually make your code much slower, if they are not defined as constants. [But for this leeture this is not that important]{.highlight}.
:::

## Solutions from last Week

- The tutorials from last week will be [available on Friday]{.highlight}
- You can access them in the project folder on Github
- Click on the little cat icon on the bottom right

. . .

::: {.callout-tip}
You can ask questions anytime in class or via email!
:::

# [Five Tutorials for this Week]{.flow} {.title}

## Topics of the Tutorials

- **Functions**: Learn how to define and use functions
- **Packages**: Learn how to install and use packages
- **DataFrames**: Learn how to work with tabular data in Julia
- **IO**: Learn how to read and write data in Julia
- **Plots**: Learn how to create plots in Julia

## Get started with the tutorials

- Download this weeks tutorials and start with the first one
- [Remember, you can ask questions anytime!]{.highlight}

. . .

::: {.callout-note}
## And that's it for this lecture!

The remaining time we will already start working on the problems of the third lecture.
:::

# [Literature]{.flow} {.title}

## Literature

- Lauwens, B., & Downey, A. B. (2019). Think Julia: How to think like a computer scientist (First edition). O’Reilly®. [Link to the free book website](https://benlauwens.github.io/ThinkJulia.jl/latest/book.html).

- [Julia Documentation](https://docs.julialang.org/)

For more interesting literature to learn more about Julia, take a look at the [literature list](../general/literature.qmd) of this course.